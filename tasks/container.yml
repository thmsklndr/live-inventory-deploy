---
- ansible.builtin.set_fact:
    mosquitto_data_dir: "{{ docker_container_data | default( '/data/docker' ) }}/mosquitto"

- ansible.builtin.set_fact:
    _mosquitto_config:
      dir: "/data/docker/mosquitto/config"
      owner: "1883"
      group: "1883"
    _aws_certs:
      dir: "/aws-certs"

- name: create required folder on host
  ansible.builtin.file:
    state: directory
    path:  "{{ item.dir }}"
#    owner: "{{ item.owner }}"
#    group: "{{ item.group }}"
    mode:  "{{ item.mode | default( '0o755' ) }}"
  with_items:
    - "{{ _mosquitto_config }}"
    - "{{ _aws_certs }}"

- name: copy config file
  template:
    src:   "mosquitto.conf"
    dest:  "{{ _mosquitto_config.dir }}/mosquitto.conf"
    owner: "{{ _mosquitto_config.owner }}"
    group: "{{ _mosquitto_config.group }}"
    mode:  "0o644"

- name: copy certs
  ansible.builtin.copy:
    src: "{{ item.0 }}"
    dest: "{{ _aws_certs.dir }}/{{ item.1 }}"
  loop:
    - [ "{{ aws_ca_file }}", "AmazonRootCA1.pem" ]
    - [ "{{ aws_cert_file }}", "certificate.pem.crt" ]
    - [ "{{ aws_priv_key_file }}", "private.pem.key" ]


      #- name: create environment files
      #template:


- name: docker_repository - Log into ECR registry and force re-authorization
  docker_login:
    registry_url: "{{ aws_ecr_name }}"
    username: "AWS"
    password: "{{ _aws_ecr_login_password }}"
    reauthorize: yes

- name: docker service definition
  set_fact:
    _services:
      controller:
        image: "{{ aws_ecr_name }}/live-inventory/controller:latest"
        volumes:
          - "{{ _aws_certs.dir }}:/certs"
        environment:
          UNIT_CLIENT_ID:            "{{ UNIT_CLIENT_ID | default( inventory_hostname ) }}" 
          UNIT_FLUSH_CACHE_INTERVAL: "{{ UNIT_FLUSH_CACHE_INTERVAL | default( omit )  }}"

          AWS_IOT_ENDPOINT:  "{{ AWS_IOT_ENDPOINT  }}"
          AWS_CLIENT_ID:     "{{ AWS_CLIENT_ID }}"

          AWS_TOPIC_DATA:    "{{ AWS_TOPIC_DATA | default(omit) }}"
          AWS_TOPIC_STATUS:  "{{ AWS_TOPIC_STATUS | default(omit) }}"
          FIX_RPI_HOST: "{{ inventory_hostname }}"
        restart: unless-stopped


      rpi:
        image: "{{ aws_ecr_name }}/live-inventory/rpi:latest"
        privileged: true
        network_mode: host
        volumes:
          - "/dev/ttyUSB0:/dev/ttyUSB0"
        environment:
          GPS_MOCK_DATA: "{{ GPS_MOCK_DATA | default( omit ) }}"
        restart: unless-stopped

      rfid:
        image: "{{ aws_ecr_name }}/live-inventory/rfid"
        environment:
          RFID_UNIT_IP:    "{{ RFID_UNIT_IP    | default( omit ) }}"
          RFID_UNIT_POWER: "{{ RFID_UNIT_POWER | default( omit ) }}"
          RFID_UNIT_POLL_INTERVAL: "{{ RFID_UNIT_POLL_INTERVAL | default( omit ) }}"
        restart: unless-stopped

      gpsmon:
        image: "{{ aws_ecr_name }}/live-inventory/gpsmon"
        environment:
          GPS_TRACK_INTERVAL: "{{ GPS_TRACK_INTERVAL    | default( omit ) }}"
        restart: unless-stopped

      gpsd:
        image: "{{ aws_ecr_name }}/live-inventory/gpsd"
        privileged: true
        restart: unless-stopped

      mqtt-local:
        image: eclipse-mosquitto
        volumes:
          - "{{ _mosquitto_config.dir }}/mosquitto.conf:/mosquitto/config/mosquitto.conf"
          - "mosquitto_data:/mosquitto/data"
          - "mosquitto_log:/mosquitto/log"
        restart: unless-stopped

      redis-local:
        image: "{{ aws_ecr_name }}/live-inventory/redis-ts:v1.6.9"
        command:
          - "redis-server"
          - "--save"
          - "60"
          - "1"
          - "--loglevel"
          - "warning"
          - "--loadmodule"
          - "/usr/lib/redis/modules/redistimeseries.so"
        volumes:
          - "redis_data:/data"
        restart: unless-stopped

# healthcheck gpsd
#netstat -an | grep 127.0.0.1:2947 | grep LISTEN &> /dev/null || echo no

- name: services to be started
  ansible.builtin.debug:
    var: _services

- name: "starting docker services"
  community.docker.docker_compose:
    project_name: "live-inventory"
    pull: yes
    definition:
      version: '3'
      services:
        "{{ _services }}"
      volumes:
        mosquitto_data:
        mosquitto_log:
        redis_data:
  register: _r
